"""
RetinoG - Setup script avec t√©l√©chargement automatique Gemma 3n
Google Gemma Worldwide Hackathon 2025
"""
import os
import sys
import subprocess
import shutil
import json
import zipfile
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

# Configuration
BASE_DIR = Path(__file__).parent
MODELS_DIR = BASE_DIR / "models"
GEMMA_MODEL_DIR = MODELS_DIR / "gemma-3n"
KAGGLE_CONFIG_DIR = Path.home() / ".kaggle"

class RetinoGSetup:
    def __init__(self):
        self.requirements = [
            "torch>=2.0.0",
            "transformers>=4.35.0",
            "opencv-python>=4.8.0",
            "mediapipe>=0.10.7",
            "face-recognition>=1.3.0",
            "Pillow>=10.0.0",
            "numpy>=1.24.0",
            "matplotlib>=3.7.0",
            "python-dotenv>=1.0.0",
            "kaggle>=1.5.16",  # Pour t√©l√©charger le mod√®le
            "tqdm>=4.65.0",
            "requests>=2.31.0"
        ]
    
    def check_python_version(self):
        """V√©rifie la version Python"""
        logger.info("üêç V√©rification de Python...")
        if sys.version_info < (3, 8):
            logger.error("‚ùå Python 3.8+ requis")
            sys.exit(1)
        logger.info(f"‚úÖ Python {sys.version.split()[0]} d√©tect√©")
    
    def create_directories(self):
        """Cr√©e la structure des dossiers"""
        logger.info("üìÅ Cr√©ation de la structure...")
        
        directories = [
            "models",
            "data/test_images", 
            "data/results",
            "scripts",
            "docs"
        ]
        
        for directory in directories:
            dir_path = BASE_DIR / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            
            # Cr√©er .gitkeep pour garder les dossiers vides
            gitkeep = dir_path / ".gitkeep"
            if not any(dir_path.iterdir()):  # Si dossier vide
                gitkeep.touch()
        
        logger.info("‚úÖ Structure cr√©√©e")
    
    def install_requirements(self):
        """Installe les d√©pendances Python"""
        logger.info("üì¶ Installation des d√©pendances...")
        
        for requirement in self.requirements:
            try:
                logger.info(f"  Installing {requirement}")
                subprocess.run([
                    sys.executable, "-m", "pip", "install", requirement
                ], check=True, capture_output=True)
                
            except subprocess.CalledProcessError as e:
                logger.error(f"‚ùå Erreur avec {requirement}: {e}")
                return False
        
        logger.info("‚úÖ D√©pendances install√©es")
        return True
    
    def setup_kaggle_api(self):
        """Configure l'API Kaggle"""
        logger.info("üèÜ Configuration Kaggle API...")
        
        # V√©rifier si kaggle.json existe
        kaggle_json = KAGGLE_CONFIG_DIR / "kaggle.json"
        
        if not kaggle_json.exists():
            logger.warning("‚ö†Ô∏è  kaggle.json non trouv√©")
            logger.info("""
üìã Pour t√©l√©charger Gemma 3n automatiquement:

1. Allez sur https://www.kaggle.com/settings/account
2. Cr√©ez un nouveau token API
3. T√©l√©chargez kaggle.json
4. Placez-le dans: {}

Ou placez kaggle.json dans le dossier du projet.
            """.format(kaggle_json.parent))
            
            # Chercher kaggle.json dans le dossier du projet
            local_kaggle = BASE_DIR / "kaggle.json"
            if local_kaggle.exists():
                logger.info("üìÑ kaggle.json trouv√© localement, copie...")
                KAGGLE_CONFIG_DIR.mkdir(exist_ok=True)
                shutil.copy2(local_kaggle, kaggle_json)
                kaggle_json.chmod(0o600)  # Permissions de s√©curit√©
                logger.info("‚úÖ kaggle.json configur√©")
                return True
            else:
                logger.info("‚è≠Ô∏è  T√©l√©chargement manuel requis")
                return False
        
        # V√©rifier les permissions
        if kaggle_json.stat().st_mode & 0o077:
            kaggle_json.chmod(0o600)
        
        logger.info("‚úÖ Kaggle API configur√©e")
        return True
    
    def download_gemma_model(self):
        """T√©l√©charge le mod√®le Gemma 3n depuis Kaggle"""
        logger.info("ü§ñ T√©l√©chargement de Gemma 3n...")
        
        if GEMMA_MODEL_DIR.exists() and any(GEMMA_MODEL_DIR.iterdir()):
            logger.info("‚úÖ Mod√®le Gemma 3n d√©j√† pr√©sent")
            return True
        
        try:
            # Importer kaggle apr√®s installation
            import kaggle
            
            # T√©l√©charger le mod√®le
            logger.info("üì• T√©l√©chargement depuis Kaggle (peut prendre du temps)...")
            
            # Cr√©er le dossier mod√®le
            GEMMA_MODEL_DIR.mkdir(parents=True, exist_ok=True)
            
            # T√©l√©charger avec l'API Kaggle
            kaggle.api.model_download(
                handle="google/gemma-3n",
                path=str(MODELS_DIR),
                untar=True,  # Extraction automatique
                quiet=False
            )
            
            # V√©rifier le t√©l√©chargement
            if self._verify_model_download():
                logger.info("‚úÖ Mod√®le Gemma 3n t√©l√©charg√© et v√©rifi√©")
                return True
            else:
                logger.error("‚ùå Erreur lors de la v√©rification du mod√®le")
                return False
                
        except ImportError:
            logger.error("‚ùå Module kaggle non install√©")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur t√©l√©chargement: {e}")
            logger.info("""
üîß T√©l√©chargement manuel:
1. Visitez: https://www.kaggle.com/models/google/gemma-3n
2. T√©l√©chargez le mod√®le
3. Extrayez dans: {}
            """.format(GEMMA_MODEL_DIR))
            return False
    
    def _verify_model_download(self):
        """V√©rifie que le mod√®le a √©t√© t√©l√©charg√© correctement"""
        expected_files = [
            "config.json",
            "model.safetensors.index.json",  # ou similaire
            "tokenizer.json"
        ]
        
        # Chercher dans tous les sous-dossiers
        for root, dirs, files in os.walk(MODELS_DIR):
            for expected_file in expected_files:
                if expected_file in files:
                    logger.info(f"  ‚úì Trouv√©: {expected_file}")
                    return True
        
        # Si pas trouv√©, lister ce qui est disponible
        logger.info("üìÅ Contenu t√©l√©charg√©:")
        for root, dirs, files in os.walk(MODELS_DIR):
            for file in files:
                rel_path = Path(root).relative_to(MODELS_DIR) / file
                logger.info(f"  - {rel_path}")
        
        return len(list(MODELS_DIR.rglob("*"))) > 0
    
    def create_env_template(self):
        """Cr√©e le fichier .env template"""
        logger.info("üîß Cr√©ation du template .env...")
        
        env_template = BASE_DIR / ".env.template"
        env_content = '''# RetinoG - Configuration Environment
# =====================================

# Kaggle API (pour t√©l√©chargement mod√®le)
KAGGLE_USERNAME=your_kaggle_username
KAGGLE_KEY=your_kaggle_key

# Google AI API (optionnel)
GOOGLE_API_KEY=your_google_api_key_here

# Mod√®le Gemma 3n
GEMMA_MODEL_PATH=./models/gemma-3n
GEMMA_USE_CUDA=true

# Param√®tres de d√©tection
CONFIDENCE_THRESHOLD=0.5
EYE_DETECTION_THRESHOLD=0.3
FACE_SIMILARITY_THRESHOLD=0.6

# Performance
ENABLE_CACHING=true
PARALLEL_PROCESSING=true
MAX_BATCH_SIZE=4

# Debug
LOG_LEVEL=INFO
DEBUG_MODE=false

# Mobile optimizations
MOBILE_MODE=false
QUANTIZATION_ENABLED=true
'''
        
        with open(env_template, 'w') as f:
            f.write(env_content)
        
        logger.info("‚úÖ .env.template cr√©√©")
        logger.info("üìù Copiez .env.template vers .env et configurez vos cl√©s")
    
    def create_download_script(self):
        """Cr√©e un script de t√©l√©chargement standalone"""
        logger.info("üìú Cr√©ation du script de t√©l√©chargement...")
        
        scripts_dir = BASE_DIR / "scripts"
        scripts_dir.mkdir(exist_ok=True)
        
        download_script = scripts_dir / "download_model.py"
        script_content = '''#!/usr/bin/env python3
"""
Script standalone pour t√©l√©charger Gemma 3n
Usage: python scripts/download_model.py
"""
import os
import sys
from pathlib import Path

# Ajouter le projet au path
sys.path.insert(0, str(Path(__file__).parent.parent))

from setup_gemma import RetinoGSetup

def main():
    setup = RetinoGSetup()
    
    print("ü§ñ T√©l√©chargement de Gemma 3n...")
    if setup.setup_kaggle_api():
        setup.download_gemma_model()
    else:
        print("‚ùå Configuration Kaggle requise")
        sys.exit(1)

if __name__ == "__main__":
    main()
'''
        
        with open(download_script, 'w') as f:
            f.write(script_content)
        
        download_script.chmod(0o755)  # Ex√©cutable
        logger.info("‚úÖ Script de t√©l√©chargement cr√©√©")
    
    def create_quick_test(self):
        """Cr√©e un test rapide du syst√®me"""
        logger.info("üß™ Cr√©ation du test rapide...")
        
        test_script = BASE_DIR / "quick_test.py"
        test_content = '''#!/usr/bin/env python3
"""
Test rapide de RetinoG
V√©rifie que tous les composants fonctionnent
"""
import sys
from pathlib import Path

def test_imports():
    """Test des imports principaux"""
    print("üì¶ Test des imports...")
    
    try:
        import torch
        print(f"  ‚úÖ PyTorch {torch.__version__}")
        print(f"  ‚úÖ CUDA: {torch.cuda.is_available()}")
    except ImportError:
        print("  ‚ùå PyTorch manquant")
        return False
    
    try:
        import cv2
        print(f"  ‚úÖ OpenCV {cv2.__version__}")
    except ImportError:
        print("  ‚ùå OpenCV manquant")
        return False
    
    try:
        import mediapipe
        print("  ‚úÖ MediaPipe")
    except ImportError:
        print("  ‚ùå MediaPipe manquant")
        return False
    
    return True

def test_model():
    """Test du mod√®le Gemma"""
    print("ü§ñ Test du mod√®le...")
    
    models_dir = Path("models")
    if not models_dir.exists():
        print("  ‚ùå Dossier models manquant")
        return False
    
    gemma_files = list(models_dir.rglob("*.json"))
    if gemma_files:
        print(f"  ‚úÖ Fichiers mod√®le trouv√©s: {len(gemma_files)}")
        return True
    else:
        print("  ‚ö†Ô∏è  Mod√®le Gemma non trouv√©")
        print("  üîß Lancez: python scripts/download_model.py")
        return False

def test_core_modules():
    """Test des modules core"""
    print("üîß Test des modules core...")
    
    try:
        from config.settings import MODELS_DIR, RESULTS_DIR
        print("  ‚úÖ Settings")
    except ImportError as e:
        print(f"  ‚ùå Settings: {e}")
        return False
    
    try:
        from core.eye_detector import AdvancedEyeDetector
        detector = AdvancedEyeDetector()
        print("  ‚úÖ EyeDetector")
    except ImportError as e:
        print(f"  ‚ùå EyeDetector: {e}")
        return False
    
    return True

def main():
    print("üè• RetinoG - Test rapide du syst√®me")
    print("=" * 40)
    
    tests = [
        ("Imports", test_imports),
        ("Mod√®le", test_model),
        ("Modules Core", test_core_modules)
    ]
    
    passed = 0
    for name, test_func in tests:
        print(f"\\n{name}:")
        if test_func():
            passed += 1
    
    print(f"\\n{'=' * 40}")
    print(f"üèÅ R√©sultats: {passed}/{len(tests)} tests pass√©s")
    
    if passed == len(tests):
        print("üéâ Syst√®me pr√™t! Lancez: python main.py")
    else:
        print("üîß Probl√®mes d√©tect√©s - consultez les erreurs ci-dessus")

if __name__ == "__main__":
    main()
'''
        
        with open(test_script, 'w') as f:
            f.write(test_content)
        
        test_script.chmod(0o755)
        logger.info("‚úÖ Test rapide cr√©√©")
    
    def run_setup(self):
        """Lance l'installation compl√®te"""
        logger.info("üöÄ D√©marrage de l'installation RetinoG")
        logger.info("Google Gemma Worldwide Hackathon 2025")
        print("=" * 50)
        
        steps = [
            ("Python", self.check_python_version),
            ("Dossiers", self.create_directories),
            ("D√©pendances", self.install_requirements),
            ("Kaggle API", self.setup_kaggle_api),
            ("Mod√®le Gemma", self.download_gemma_model),
            ("Configuration", self.create_env_template),
            ("Scripts", self.create_download_script),
            ("Tests", self.create_quick_test)
        ]
        
        completed = 0
        for step_name, step_func in steps:
            print(f"\nüîÑ {step_name}...")
            try:
                if step_func():
                    completed += 1
                    logger.info(f"‚úÖ {step_name} termin√©")
                else:
                    logger.warning(f"‚ö†Ô∏è  {step_name} partiellement termin√©")
            except Exception as e:
                logger.error(f"‚ùå {step_name} √©chou√©: {e}")
        
        print("\n" + "=" * 50)
        logger.info(f"üèÅ Installation termin√©e: {completed}/{len(steps)} √©tapes")
        
        if completed >= len(steps) - 1:  # Permettre 1 √©chec
            print("""
üéâ INSTALLATION R√âUSSIE!

√âtapes suivantes:
1. Copiez .env.template vers .env
2. Configurez vos cl√©s API dans .env
3. Testez: python quick_test.py
4. Lancez: python main.py

Pour le hackathon:
üèÜ Votre app RetinoG est pr√™te!
ü§ñ Gemma 3n install√©
üì± Pr√™t pour d√©mo mobile

Bonne chance pour le Google Gemma Worldwide Hackathon! üöÄ
            """)
        else:
            print("""
‚ö†Ô∏è  INSTALLATION PARTIELLE

Probl√®mes d√©tect√©s. Solutions:
1. V√©rifiez les erreurs ci-dessus
2. Installez manuellement les d√©pendances manquantes
3. T√©l√©chargez Gemma 3n manuellement si n√©cessaire

Support: Consultez le README.md
            """)

def main():
    setup = RetinoGSetup()
    setup.run_setup()

if __name__ == "__main__":
    main()
