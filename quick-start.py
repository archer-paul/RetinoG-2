#!/usr/bin/env python3
"""
Script de d√©marrage rapide pour RetinoblastoGemma
R√©sout les probl√®mes de chargement et offre des options de d√©marrage
"""
import sys
import time
import logging
import subprocess
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s: %(message)s'
)
logger = logging.getLogger(__name__)

def check_python_version():
    """V√©rifie la version Python"""
    if sys.version_info < (3, 8):
        logger.error("Python 3.8+ requis")
        return False
    logger.info(f"‚úÖ Python {sys.version.split()[0]}")
    return True

def check_dependencies():
    """V√©rifie les d√©pendances essentielles"""
    essential_deps = [
        'tkinter',
        'PIL',
        'cv2',
        'numpy'
    ]
    
    missing = []
    for dep in essential_deps:
        try:
            __import__(dep)
            logger.info(f"‚úÖ {dep}")
        except ImportError:
            missing.append(dep)
            logger.error(f"‚ùå {dep} manquant")
    
    if missing:
        logger.error(f"D√©pendances manquantes: {missing}")
        logger.info("Installez avec: pip install -r requirements.txt")
        return False
    
    return True

def check_optional_dependencies():
    """V√©rifie les d√©pendances optionnelles"""
    optional_deps = {
        'torch': 'PyTorch (am√©liore les performances)',
        'transformers': 'Transformers (pour mod√®le Gemma local)',
        'mediapipe': 'MediaPipe (d√©tection avanc√©e)'
    }
    
    available = []
    for dep, desc in optional_deps.items():
        try:
            __import__(dep)
            available.append(dep)
            logger.info(f"‚úÖ {dep} - {desc}")
        except ImportError:
            logger.warning(f"‚ö†Ô∏è {dep} non disponible - {desc}")
    
    return available

def create_directories():
    """Cr√©e la structure de dossiers n√©cessaire"""
    directories = [
        'models',
        'data/test_images',
        'data/results',
        'config'
    ]
    
    for directory in directories:
        dir_path = Path(directory)
        dir_path.mkdir(parents=True, exist_ok=True)
        logger.info(f"üìÅ {directory}")
    
    return True

def check_model_availability():
    """V√©rifie la disponibilit√© du mod√®le Gemma"""
    model_path = Path("models/gemma-3n")
    
    if model_path.exists():
        config_file = model_path / "config.json"
        if config_file.exists():
            logger.info("‚úÖ Mod√®le Gemma 3n disponible")
            return True
        else:
            logger.warning("‚ö†Ô∏è Mod√®le Gemma incomplet")
            return False
    else:
        logger.warning("‚ö†Ô∏è Mod√®le Gemma non trouv√©")
        logger.info("üí° L'application fonctionnera en mode simulation")
        return False

def start_application(force_simulation=False):
    """D√©marre l'application avec options"""
    try:
        logger.info("üöÄ D√©marrage de RetinoblastoGemma...")
        
        # Import et d√©marrage de l'application
        if force_simulation:
            # Mode simulation forc√©
            logger.info("üîß Mode simulation forc√©")
            import os
            os.environ['RETINO_FORCE_SIMULATION'] = '1'
        
        # Import de l'application principale
        from main import main
        main()
        
    except ImportError as e:
        logger.error(f"‚ùå Erreur d'import: {e}")
        logger.info("üí° V√©rifiez que tous les modules sont install√©s")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur de d√©marrage: {e}")
        return False
    
    return True

def install_dependencies():
    """Installe les d√©pendances automatiquement"""
    logger.info("üì¶ Installation des d√©pendances...")
    
    try:
        # D√©pendances essentielles
        essential_packages = [
            "pillow>=10.0.0",
            "opencv-python>=4.8.0", 
            "numpy>=1.24.0",
            "matplotlib>=3.7.0"
        ]
        
        for package in essential_packages:
            logger.info(f"  Installing {package}...")
            subprocess.run([
                sys.executable, "-m", "pip", "install", package
            ], check=True, capture_output=True)
        
        logger.info("‚úÖ D√©pendances essentielles install√©es")
        
        # D√©pendances optionnelles
        optional_packages = [
            "torch>=2.0.0",
            "transformers>=4.35.0",
            "mediapipe>=0.10.7"
        ]
        
        for package in optional_packages:
            try:
                logger.info(f"  Installing {package} (optionnel)...")
                subprocess.run([
                    sys.executable, "-m", "pip", "install", package
                ], check=True, capture_output=True, timeout=300)
            except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
                logger.warning(f"‚ö†Ô∏è √âchec installation {package} (optionnel)")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur installation: {e}")
        return False

def show_menu():
    """Affiche le menu de d√©marrage"""
    print("\n" + "="*60)
    print("üè• RETINOBLASTOGAMMA - EARLY DETECTION SYSTEM")
    print("="*60)
    print("1. üöÄ D√©marrage rapide (recommand√©)")
    print("2. üîß Mode simulation (sans mod√®le IA)")
    print("3. üì¶ Installer les d√©pendances")
    print("4. üß™ Tests syst√®me")
    print("5. ‚ùå Quitter")
    print("="*60)

def run_system_tests():
    """Lance les tests syst√®me"""
    logger.info("üß™ Lancement des tests syst√®me...")
    
    try:
        # Tests basiques
        tests = [
            ("Version Python", check_python_version),
            ("D√©pendances", check_dependencies),
            ("Structure dossiers", create_directories),
            ("Mod√®le Gemma", check_model_availability)
        ]
        
        passed = 0
        for test_name, test_func in tests:
            logger.info(f"\nüîß Test: {test_name}")
            if test_func():
                passed += 1
        
        logger.info(f"\nüìä R√©sultats: {passed}/{len(tests)} tests r√©ussis")
        
        if passed == len(tests):
            logger.info("üéâ Syst√®me pr√™t!")
            return True
        else:
            logger.warning("‚ö†Ô∏è Probl√®mes d√©tect√©s")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur tests: {e}")
        return False

def main():
    """Fonction principale du d√©marrage rapide"""
    print("\nüè• RetinoblastoGemma - Quick Start")
    print("================================")
    
    # V√©rifications initiales rapides
    if not check_python_version():
        input("Appuyez sur Entr√©e pour quitter...")
        return
    
    # Menu principal
    while True:
        show_menu()
        
        try:
            choice = input("\nChoisissez une option (1-5): ").strip()
            
            if choice == '1':
                # D√©marrage rapide
                logger.info("üîÑ V√©rifications pr√©liminaires...")
                
                if not check_dependencies():
                    logger.error("‚ùå D√©pendances manquantes")
                    install_choice = input("Installer automatiquement? (y/n): ")
                    if install_choice.lower() == 'y':
                        if install_dependencies():
                            logger.info("‚úÖ Installation r√©ussie")
                        else:
                            logger.error("‚ùå Installation √©chou√©e")
                            continue
                    else:
                        continue
                
                create_directories()
                check_optional_dependencies()
                model_available = check_model_availability()
                
                # D√©marrage avec ou sans mod√®le
                if start_application(force_simulation=not model_available):
                    break
                else:
                    logger.error("‚ùå √âchec d√©marrage")
                    input("Appuyez sur Entr√©e pour continuer...")
            
            elif choice == '2':
                # Mode simulation
                logger.info("üîß D√©marrage en mode simulation...")
                create_directories()
                if start_application(force_simulation=True):
                    break
                else:
                    logger.error("‚ùå √âchec d√©marrage")
                    input("Appuyez sur Entr√©e pour continuer...")
            
            elif choice == '3':
                # Installation d√©pendances
                if install_dependencies():
                    logger.info("‚úÖ Installation termin√©e")
                else:
                    logger.error("‚ùå Installation √©chou√©e")
                input("Appuyez sur Entr√©e pour continuer...")
            
            elif choice == '4':
                # Tests syst√®me
                run_system_tests()
                input("Appuyez sur Entr√©e pour continuer...")
            
            elif choice == '5':
                # Quitter
                logger.info("üëã Au revoir!")
                break
            
            else:
                print("‚ùå Option invalide. Choisissez 1-5.")
        
        except KeyboardInterrupt:
            print("\nüëã Au revoir!")
            break
        except Exception as e:
            logger.error(f"‚ùå Erreur: {e}")
            input("Appuyez sur Entr√©e pour continuer...")

if __name__ == "__main__":
    main()